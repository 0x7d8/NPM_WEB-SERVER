var I=Object.create;var h=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var H=Object.getPrototypeOf,V=Object.prototype.hasOwnProperty;var u=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(e,r)=>(typeof require<"u"?require:e)[r]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var $=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports);var q=(t,e,r,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let l of P(e))!V.call(t,l)&&l!==r&&h(t,l,{get:()=>e[l],enumerable:!(s=N(e,l))||s.enumerable});return t};var C=(t,e,r)=>(r=t!=null?I(H(t)):{},q(e||!t||!t.__esModule?h(r,"default",{value:t,enumerable:!0}):r,t));var S=$((M,E)=>{E.exports=["OPTIONS","DELETE","PATCH","STATIC","POST","PUT","GET"]});import*as p from"fs";var n=(t,e)=>(e=e||[],p.readdirSync(t).forEach(s=>{if(p.statSync(t+"/"+s).isDirectory())e=n(t+"/"+s,e);else{let l=t+"/"+s;e.push(l)}}),e),y=(t,e,r)=>(r=r||[],r=n(t,r).filter(s=>s.endsWith(e)),r);var c=C(S());import*as A from"path";import*as b from"fs";var f=class{constructor(e){e=e!=null?e:[],this.urls=e}set(e,r,s){if(!c.default.includes(e))throw TypeError(`No Valid Request Type: ${e}
Possible Values: ${c.default.join(", ")}`);this.urls[e+r]={array:r.split("/"),addTypes:!1,path:r,type:e,code:s}}static(e,r,s){var T,d,g;let l=(T=s==null?void 0:s.preload)!=null?T:!1,m=(d=s==null?void 0:s.remHTML)!=null?d:!1,x=(g=s==null?void 0:s.addTypes)!=null?g:!0;for(let o of n(r)){let a=o.replace(r,""),i="";a.replace("/","")==="index.html"&&m?i=e.replace("//","/"):a.replace("/","").endsWith(".html")&&m?i=(e+a).replace("//","/").replace(".html",""):i=(e+a).replace("//","/"),this.urls["GET"+i]={file:o,array:i.split("/"),addTypes:x,path:i,type:"STATIC"},l&&(this.urls["GET"+i].content=b.readFileSync(o))}}load(e){let r=y(e,".js");for(let s of r){let l=u(A.resolve(s));if(!(!("path"in l)||!("type"in l)||!("code"in l))){if(!c.default.includes(l.type))throw TypeError(`No Valid Request Type: ${l.type}
Possible Values: ${c.default.toString()}`);this.urls[l.type+l.path]={array:l.path.split("/"),addTypes:!1,path:l.path,type:l.type,code:l.code}}}}list(){return this.urls}};export{f as default};
